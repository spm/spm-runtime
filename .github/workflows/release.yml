name: Release
description: Compile, Build, Publish on PyPI, Release on GitHub

on:
  workflow_dispatch:
    inputs:
      spm-version:
        description: 'SPM Commit / Branch / Tag / SHA to checkout'
        required: false
        default: ''

env:
  MATLAB_LATEST: R2024b

# ======================================================================

jobs:

  # --------------------------------------------------------------------
  guess-version:
    runs-on: ubuntu-latest
    steps:
      - name: Guess version
        uses: ./.github/workflows/guess_version
        with:
          spm-version: ${{ inputs.spm-version }}

  # --------------------------------------------------------------------
  compile:
    needs: guess-version
    runs-on: ubuntu-latest

    strategy:
      fail-fast: False
      matrix:
        matlab-version: [
          "R2020a", "R2020b",
          "R2021a", "R2021b",
          "R2022a", "R2022b",
          "R2023a", "R2023b",
          "R2024a", "R2024b",
        ]

    steps:
      - name: Compile
        uses: ./.github/workflows/compile
        with:
          matlab-version: ${{ matrix.matlab-version }}
          spm-version: ${{ inputs.spm-version }}

  # --------------------------------------------------------------------
  publish-main:
    runs-on: ubuntu-latest
    needs: compile

    environment:
      # name: pypi
      # url: https://pypi.org/p/spm-runtime

      name: testpypi
      url: https://test.pypi.org/p/spm-runtime

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:

    - name: Build
      uses: ./.github/workflows/build
      with:
        spm-version: ${{ inputs.spm-version }}
        matlab-version: ${{ env.MATLAB_LATEST }}
        main-package: true

    - name: Download distribution
      uses: actions/download-artifact@v4
      with:
        name: spm_${{ inputs.spm-version }}_${{ env.MATLAB_LATEST }}.dist
        path: dist/

    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  # --------------------------------------------------------------------
  publish-matrix:
    runs-on: ubuntu-latest
    needs: publish-main

    environment:
      # name: pypi
      # url: https://pypi.org/p/spm-runtime

      name: testpypi
      url: https://test.pypi.org/p/spm-runtime

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    strategy:
      fail-fast: False
      matrix:
        matlab-version: [
          "R2020a", "R2020b",
          "R2021a", "R2021b",
          "R2022a", "R2022b",
          "R2023a", "R2023b",
          "R2024a", "R2024b",
        ]

    steps:

      - name: Compile
        uses: ./.github/workflows/compile
        with:
          matlab-version: ${{ matrix.matlab-version }}
          spm-version: ${{ inputs.spm-version }}

      - name: Build
        uses: ./.github/workflows/build
        with:
          spm-version: ${{ inputs.spm-version }}
          matlab-version: ${{ matrix.matlab-version }}
          main-package: false

      - name: Download distribution
        uses: actions/download-artifact@v4
        with:
          name: spm_${{ inputs.spm-version }}_${{ matrix.matlab-version }}.dist
          path: dist/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  # --------------------------------------------------------------------
  github-release:
    runs-on: ubuntu-latest
    name: Sign the Package with Sigstore and upload it to GitHub Release
    needs: publish-main

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: spm_${{ inputs.spm-version }}_${{ env.MATLAB_LATEST }}.dist
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release create "$VERSION" --repo "$GITHUB_REPOSITORY" --notes ""

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: |
        gh release upload "$VERSION" dist/** --repo "$GITHUB_REPOSITORY"
