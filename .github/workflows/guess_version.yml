name: Guess version
description: |
  This workflow computes the next spm-runtime version for a given
  spm version, so the the .dev or .post tags are properly incremented.

  It creates an artifact named "spm_{inputs.spm-version}.env" that contains
  the following definitions:
    VERSION={next spm-runtime version}
    SPM_VERSION={corresponding spm version, eventually with .dev}
    SPM_SHA={hash of the corresponding spm commit}
    SPM_DATE={date of the corresponding spm commit}

on:
  workflow_dispatch:
    inputs:
      spm-version:
        description: 'SPM Commit / Branch / Tag / SHA to checkout'
        required: false
        default: 'main'

  workflow_call:
    inputs:
      spm-version:
        description: 'SPM Commit / Branch / Tag / SHA to checkout'
        required: false
        default: 'main'
        type: string
      increase-post:
        description: 'Whether to increase the post release (only if main)'
        required: false
        default: false
        type: boolean

jobs:
  guess-version:
    runs-on: ubuntu-latest
    steps:

      - name: Check out SPM
        uses: actions/checkout@v4
        # I need the entire depth to query tags
        with:
          repository: spm/spm
          ref: ${{ inputs.spm-version }}
          path: spm

      - name: Check out SPM-runtime
        uses: actions/checkout@v4
        # I need the entire depth to query tags
        with:
          path: spm-runtime

      - name: Compute tag
        shell: bash
        env:
          INCREASE: ${{ inputs.increase-post }}
        run: |
          # Helper
          array_contains () {
              local array="$1[@]"
              local seeking=$2
              local in=1
              for element in "${!array}"; do
                  if [[ $element == "$seeking" ]]; then
                      in=0
                      break
                  fi
              done
              return $in
          }

          cd spm

          # Read SPM hash and save
          SPM_SHA=$( git rev-parse HEAD )
          echo "SPM_SHA=${SPM_SHA}"
          echo "SPM_SHA=${SPM_SHA}" >> "$GITHUB_OUTPUT"
          echo "SPM_SHA=${SPM_SHA}" >> "$GITHUB_ENV"

          # Read SPM commit date and save
          SPM_DATE=$( git show --no-patch --format=%cs )
          echo "SPM_DATE=${SPM_DATE}"
          echo "SPM_DATE=${SPM_DATE}" >> "$GITHUB_OUTPUT"
          echo "SPM_DATE=${SPM_DATE}" >> "$GITHUB_ENV"

          # Check if current SPM tag is a release or a dev
          SPM_VERSION_CURRENT="$( git describe --tags )"
          if [[ $SPM_VERSION_CURRENT =~ "-" ]]; then
            # Checked out latest -> read most recent SPM tag
            SPM_VERSION="$( git describe --tags $(git rev-list --tags --max-count=1) )"
            POST_KEY=".dev"
          else
            # Checked out an exact tag
            SPM_VERSION="$SPM_VERSION_CURRENT"
            POST_KEY=".post"
          fi

          cd ../spm-runtime

          # Read all spm-runtime tags
          IFS=$'\n' read -r -d '' -a RUNTIME_VERSIONS < <( git tag && printf '\0' )

          cd ..

          # Compute post/dev increment
          POST_VAL=0
          EXISTS=false
          for RUNTIME_VERSION in "${RUNTIME_VERSIONS[@]}"; do
            # Match vanilla version 
            if [[ "$RUNTIME_VERSION" =~ "${SPM_VERSION}${POST_KEY}" ]]
            then
              EXISTS=true
            fi
            # Match against SPM_VERSION.POST_KEYxx
            if [[ "$RUNTIME_VERSION" =~ "${SPM_VERSION}${POST_KEY}(\d+)" ]]
            then
              if (( ${BASH_REMATCH[1]} -gt ${POST_VAL} )); then
                POST_VAL=${BASH_REMATCH[1]}
              fi
            fi
          done

          if [ ${EXISTS} = true ]; then
            if [[ "$INCREASE" == "true" ]]; then
              POST_VAL=$(( ${POST_VAL} + 1 ))
            fi
            RUNTIME_VERSION="${SPM_VERSION}${POST_KEY}${POST_VAL}"
          elif [[ "$POST_KEY" == ".dev" ]]; then
            RUNTIME_VERSION="${SPM_VERSION}.dev1"
          else
            RUNTIME_VERSION="${SPM_VERSION}"
          fi

          echo "VERSION=${RUNTIME_VERSION}"
          echo "VERSION=${RUNTIME_VERSION}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${RUNTIME_VERSION}" >> "$GITHUB_ENV"

          if [[ $POST_KEY == ".dev" ]]; then
            SPM_VERSION=${SPM_VERSION}${POST_KEY}
          fi

          echo "SPM_VERSION=${SPM_VERSION}"
          echo "SPM_VERSION=${SPM_VERSION}" >> "$GITHUB_OUTPUT"
          echo "SPM_VERSION=${SPM_VERSION}" >> "$GITHUB_ENV"

      - name: Write versions
        shell: bash
        run: |
          FILENAME="spm.env"
          [[ -f "$FILENAME" ]] && rm -f "$FILENAME"
          echo "VERSION=${VERSION}"         >> "$FILENAME"
          echo "SPM_VERSION=${SPM_VERSION}" >> "$FILENAME"
          echo "SPM_SHA=${SPM_SHA}"         >> "$FILENAME"
          echo "SPM_DATE=${SPM_DATE}"       >> "$FILENAME"

      - name: Upload version metadata
        uses: actions/upload-artifact@v4
        with:
          name: spm_${{ inputs.spm-version }}.env
          path: spm.env
